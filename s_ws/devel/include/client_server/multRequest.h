// Generated by gencpp from file client_server/multRequest.msg
// DO NOT EDIT!


#ifndef CLIENT_SERVER_MESSAGE_MULTREQUEST_H
#define CLIENT_SERVER_MESSAGE_MULTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace client_server
{
template <class ContainerAllocator>
struct multRequest_
{
  typedef multRequest_<ContainerAllocator> Type;

  multRequest_()
    : characrer()
    , b(0)  {
    }
  multRequest_(const ContainerAllocator& _alloc)
    : characrer(_alloc)
    , b(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _characrer_type;
  _characrer_type characrer;

   typedef int32_t _b_type;
  _b_type b;





  typedef boost::shared_ptr< ::client_server::multRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::client_server::multRequest_<ContainerAllocator> const> ConstPtr;

}; // struct multRequest_

typedef ::client_server::multRequest_<std::allocator<void> > multRequest;

typedef boost::shared_ptr< ::client_server::multRequest > multRequestPtr;
typedef boost::shared_ptr< ::client_server::multRequest const> multRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::client_server::multRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::client_server::multRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::client_server::multRequest_<ContainerAllocator1> & lhs, const ::client_server::multRequest_<ContainerAllocator2> & rhs)
{
  return lhs.characrer == rhs.characrer &&
    lhs.b == rhs.b;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::client_server::multRequest_<ContainerAllocator1> & lhs, const ::client_server::multRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace client_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::client_server::multRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::client_server::multRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::client_server::multRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::client_server::multRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::client_server::multRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::client_server::multRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::client_server::multRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fbbbe34d40c0044d88ba39b1c8c4d902";
  }

  static const char* value(const ::client_server::multRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfbbbe34d40c0044dULL;
  static const uint64_t static_value2 = 0x88ba39b1c8c4d902ULL;
};

template<class ContainerAllocator>
struct DataType< ::client_server::multRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "client_server/multRequest";
  }

  static const char* value(const ::client_server::multRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::client_server::multRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string characrer\n"
"int32 b\n"
;
  }

  static const char* value(const ::client_server::multRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::client_server::multRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.characrer);
      stream.next(m.b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct multRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::client_server::multRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::client_server::multRequest_<ContainerAllocator>& v)
  {
    s << indent << "characrer: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.characrer);
    s << indent << "b: ";
    Printer<int32_t>::stream(s, indent + "  ", v.b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLIENT_SERVER_MESSAGE_MULTREQUEST_H
